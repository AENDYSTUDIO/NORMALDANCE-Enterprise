#!/bin/bash# NormalDance Platform Launch Script# This script orchestrates the complete launch of the NormalDance platformset -e# ConfigurationPROJECT_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"NAMESPACE="production"CLUSTER_NAME="normaldance-prod"REGION="us-east-1"ENVIRONMENT="production"LOG_LEVEL="info"MONITORING_ENABLED=trueBACKUP_ENABLED=trueANALYTICS_ENABLED=trueSECURITY_ENABLED=true# Colors for outputRED='\033[0;31m'GREEN='\033[0;32m'YELLOW='\033[1;33m'BLUE='\033[0;34m'NC='\033[0m' # No Color# Logging functionlog() {    echo -e "${GREEN}[INFO]${NC} $1"}warn() {    echo -e "${YELLOW}[WARN]${NC} $1"}error() {    echo -e "${RED}[ERROR]${NC} $1"    exit 1}info() {    echo -e "${BLUE}[INFO]${NC} $1"}# Check prerequisitescheck_prerequisites() {    log "Checking prerequisites..."        # Check if required tools are installed    if ! command -v kubectl &> /dev/null; then        error "kubectl is not installed"    fi        if ! command -v helm &> /dev/null; then        error "helm is not installed"    fi        if ! command -v aws &> /dev/null; then        error "aws-cli is not installed"    fi        if ! command -v docker &> /dev/null; then        error "docker is not installed"    fi        if ! command -v node &> /dev/null; then        error "node is not installed"    fi        if ! command -v npm &> /dev/null; then        error "npm is not installed"    fi        if ! command -v curl &> /dev/null; then        error "curl is not installed"    fi        if ! command -v jq &> /dev/null; then        error "jq is not installed"    fi        log "All prerequisites are installed"}# Validate environmentvalidate_environment() {    log "Validating environment..."        # Check if required environment variables are set    if [ -z "$AWS_ACCESS_KEY_ID" ]; then        error "AWS_ACCESS_KEY_ID is not set"    fi        if [ -z "$AWS_SECRET_ACCESS_KEY" ]; then        error "AWS_SECRET_ACCESS_KEY is not set"    fi        if [ -z "$DATABASE_URL" ]; then        error "DATABASE_URL is not set"    fi        if [ -z "$REDIS_URL" ]; then        error "REDIS_URL is not set"    fi        if [ -z "$JWT_SECRET" ]; then        error "JWT_SECRET is not set"    fi        if [ -z "$SOLANA_RPC_URL" ]; then        error "SOLANA_RPC_URL is not set"    fi        log "Environment validation completed"}# Setup infrastructuresetup_infrastructure() {    log "Setting up infrastructure..."        # Create namespace    kubectl create namespace $NAMESPACE --dry-run=client -o yaml | kubectl apply -f -        # Apply Helm charts    helm repo add bitnami https://charts.bitnami.com/bitnami    helm repo update        # Deploy PostgreSQL    helm install postgresql bitnami/postgresql \        --namespace $NAMESPACE \        --set auth.postgresPassword=$POSTGRES_PASSWORD \        --set primary.persistence.size=50Gi \        --set primary.persistence.storageClass=gp2        # Deploy Redis    helm install redis bitnami/redis \        --namespace $NAMESPACE \        --set auth.password=$REDIS_PASSWORD \        --set master.persistence.size=10Gi \        --set master.persistence.storageClass=gp2        # Deploy Nginx    helm install nginx-ingress bitnami/nginx-ingress-controller \        --namespace $NAMESPACE \        --set controller.service.type=LoadBalancer \        --set controller.service.annotations."service\.beta\.kubernetes\.io/aws-load-balancer-type"="nlb"        # Deploy monitoring stack    if [ "$MONITORING_ENABLED" = true ]; then        helm install prometheus prometheus-community/kube-prometheus-stack \            --namespace $NAMESPACE \            --set grafana.adminPassword=$GRAFANA_PASSWORD \            --set prometheus.prometheusSpec.retention=$METRICS_RETENTION                helm install elasticsearch elastic/elasticsearch \            --namespace $NAMESPACE \            --set replicas=1 \            --set persistence.enabled=true \            --set persistence.size=20Gi                helm install kibana elastic/kibana \            --namespace $NAMESPACE \            --set elasticsearch.host=http://elasticsearch-master:9200    fi        # Deploy backup system    if [ "$BACKUP_ENABLED" = true ]; then        helm install velero velero/velero \            --namespace $NAMESPACE \            --set configuration.provider=aws \            --set configuration.backupStorageLocation.name=default \            --set configuration.backupStorageLocation.bucket=$BACKUP_BUCKET \            --set configuration.backupStorageLocation.config.region=$REGION \            --set configuration.backupStorageLocation.config.s3ForcePathStyle=true \            --set configuration.backupStorageLocation.config.s3Url=https://s3.$REGION.amazonaws.com \            --set snapshotsLocation.bucket=$BACKUP_BUCKET \            --set schedules.daily.schedule="0 2 * * *" \            --set schedules.daily.template="daily-backup"    fi        log "Infrastructure setup completed"}# Deploy applicationdeploy_application() {    log "Deploying application..."        # Build Docker images    cd $PROJECT_ROOT    docker build -t normaldance-api:latest .    docker build -t normaldance-web:latest -f Dockerfile.web .        # Push to registry    docker tag normaldance-api:latest $ECR_REGISTRY/normaldance-api:latest    docker tag normaldance-web:latest $ECR_REGISTRY/normaldance-web:latest    docker push $ECR_REGISTRY/normaldance-api:latest    docker push $ECR_REGISTRY/normaldance-web:latest        # Deploy application    kubectl apply -f k8s/namespace.yaml    kubectl apply -f k8s/configmap.yaml    kubectl apply -f k8s/secret.yaml    kubectl apply -f k8s/deployment.yaml    kubectl apply -f k8s/service.yaml    kubectl apply -f k8s/ingress.yaml        # Wait for deployment to complete    kubectl rollout status deployment/normaldance-api -n $NAMESPACE    kubectl rollout status deployment/normaldance-web -n $NAMESPACE        log "Application deployment completed"}# Run testsrun_tests() {    log "Running tests..."        # Run unit tests    npm test        # Run integration tests    npm run test:integration        # Run e2e tests    npm run test:e2e        # Run security tests    npm run test:security        log "All tests passed"}# Setup monitoringsetup_monitoring() {    log "Setting up monitoring..."        # Apply monitoring configurations    kubectl apply -f monitoring/prometheus-config.yaml    kubectl apply -f monitoring/alertmanager-config.yaml        # Create monitoring dashboards    kubectl apply -f monitoring/dashboards/normaldance-dashboard.json        # Setup log aggregation    ./monitoring/scripts/log-collection.sh start        log "Monitoring setup completed"}# Setup analyticssetup_analytics() {    log "Setting up analytics..."        # Configure analytics services    ./monitoring/scripts/analytics-tracking.sh setup        # Setup event tracking    kubectl apply -f k8s/analytics-config.yaml        log "Analytics setup completed"}# Setup securitysetup_security() {    log "Setting up security..."        # Apply security configurations    kubectl apply -f k8s/network-policy.yaml    kubectl apply -f k8s/pod-security-policy.yaml    kubectl apply -f k8s/role-binding.yaml        # Setup security scanning    npm audit fix    npm audit --audit-level moderate        # Setup vulnerability scanning    trivy image --exit-code 0 --severity "HIGH,CRITICAL" normaldance-api:latest    trivy image --exit-code 0 --severity "HIGH,CRITICAL" normaldance-web:latest        log "Security setup completed"}# Setup backupsetup_backup() {    log "Setting up backup..."        # Configure backup system    ./monitoring/scripts/backup.sh setup        # Setup automated backups    kubectl apply -f k8s/cronjob-backup.yaml        log "Backup setup completed"}# Setup documentationsetup_documentation() {    log "Setting up documentation..."        # Generate API documentation    npm run docs:generate        # Deploy documentation    kubectl apply -f k8s/documentation.yaml        log "Documentation setup completed"}# Setup marketingsetup_marketing() {    log "Setting up marketing..."        # Configure marketing campaigns    ./scripts/marketing-campaign.sh setup        # Setup social media automation    ./scripts/marketing-campaign.sh social-media        # Setup email marketing    ./scripts/marketing-campaign.sh email        log "Marketing setup completed"}# Health checkhealth_check() {    log "Performing health check..."        # Check API health    curl -f $API_URL/health || error "API health check failed"        # Check database health    curl -f $API_URL/health/database || error "Database health check failed"        # Check external services    curl -f https://api.spotify.com/v1 || warn "Spotify API is not accessible"    curl -f https://api.apple.com || warn "Apple API is not accessible"        log "Health check completed"}# Performance checkperformance_check() {    log "Performing performance check..."        # Check API response time    response_time=$(curl -o /dev/null -s -w '%{time_total}' $API_URL/health)    if (( $(echo "$response_time > 2" | bc -l) )); then        warn "API response time is high: $response_time seconds"    else        log "API response time is good: $response_time seconds"    fi        # Check error rate    error_rate=$(curl -s $API_URL/health/metrics | jq -r '.error_rate')    if (( $(echo "$error_rate > 0.01" | bc -l) )); then        warn "Error rate is high: $error_rate"    else        log "Error rate is good: $error_rate"    fi        log "Performance check completed"}# Main functionmain() {    log "Starting NormalDance platform launch..."        # Check prerequisites    check_prerequisites        # Validate environment    validate_environment        # Setup infrastructure    setup_infrastructure        # Deploy application    deploy_application        # Run tests    run_tests        # Setup monitoring    setup_monitoring        # Setup analytics    setup_analytics        # Setup security    setup_security        # Setup backup    setup_backup        # Setup documentation    setup_documentation        # Setup marketing    setup_marketing        # Health check    health_check        # Performance check    performance_check        log "NormalDance platform launch completed successfully!"        # Display next steps    echo ""    echo "Next Steps:"    echo "1. Access the application at: https://normaldance.app"    echo "2. Monitor the platform at: https://monitoring.normaldance.app"    echo "3. Check analytics at: https://analytics.normaldance.app"    echo "4. Access documentation at: https://docs.normaldance.app"    echo "5. Support team: support@normaldance.app"    echo ""    echo "Monitoring Dashboard: https://monitoring.normaldance.app"    echo "Analytics Dashboard: https://analytics.normaldance.app"    echo "Documentation: https://docs.normaldance.app"    echo ""    echo "For more information, visit: https://normaldance.app"}# Run main function# Run main functionmain "$@"