#!/usr/bin/env node

/**
 * –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã SSH-–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É 176.108.246.49
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –∞—Å–ø–µ–∫—Ç—ã –ø—Ä–æ–±–ª–µ–º—ã: —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª—é—á–µ–π, –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é, –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');
const os = require('os');

class AutomatedSHHSolver {
    constructor() {
        this.serverIP = '176.108.246.49';
        this.sshUser = 'root';
        this.sshDir = path.join(os.homedir(), '.ssh');
        this.configFile = path.join(this.sshDir, 'config');
        this.ed25519Key = path.join(this.sshDir, 'id_ed25519');
        this.ed25519Pub = path.join(this.sshDir, 'id_ed25519.pub');
        this.rsaKey = path.join(this.sshDir, 'id_rsa');
        this.rsaPub = path.join(this.sshDir, 'id_rsa.pub');
        
        this.colors = {
            reset: '\x1b[0m',
            red: '\x1b[31m',
            green: '\x1b[32m',
            yellow: '\x1b[33m',
            blue: '\x1b[34m',
            magenta: '\x1b[35m',
            cyan: '\x1b[36m'
        };
    }

    log(message, color = 'reset') {
        console.log(`${this.colors[color]}${message}${this.colors.reset}`);
    }

    error(message) {
        this.log(`‚ùå ${message}`, 'red');
    }

    success(message) {
        this.log(`‚úÖ ${message}`, 'green');
    }

    info(message) {
        this.log(`‚ÑπÔ∏è  ${message}`, 'yellow');
    }

    debug(message) {
        this.log(`üîç ${message}`, 'cyan');
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥–ø–æ—Å—ã–ª–æ–∫
    checkPrerequisites() {
        this.info('–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥–ø–æ—Å—ã–ª–æ–∫...');
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ SSH
        try {
            execSync('ssh -V', { stdio: 'ignore' });
            this.success('SSH –∫–ª–∏–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–µ–Ω');
        } catch (error) {
            this.error('SSH –∫–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ OpenSSH.');
            return false;
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ .ssh
        if (!fs.existsSync(this.sshDir)) {
            fs.mkdirSync(this.sshDir, { mode: 0o700 });
            this.success(`–°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è ${this.sshDir}`);
        }

        return true;
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ SSH-–∫–ª—é—á–µ–π
    createSSHKeys() {
        this.info('–°–æ–∑–¥–∞–Ω–∏–µ SSH-–∫–ª—é—á–µ–π...');
        
        let keysCreated = false;

        // Ed25519 –∫–ª—é—á
        if (!fs.existsSync(this.ed25519Key)) {
            try {
                execSync(`ssh-keygen -t ed25519 -f "${this.ed25519Key}" -N ""`, { stdio: 'ignore' });
                this.success('–°–æ–∑–¥–∞–Ω Ed25519 –∫–ª—é—á');
                keysCreated = true;
            } catch (error) {
                this.error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å Ed25519 –∫–ª—é—á');
            }
        } else {
            this.success('Ed25519 –∫–ª—é—á —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
        }

        // RSA –∫–ª—é—á (—Ä–µ–∑–µ—Ä–≤–Ω—ã–π)
        if (!fs.existsSync(this.rsaKey)) {
            try {
                execSync(`ssh-keygen -t rsa -b 4096 -f "${this.rsaKey}" -N ""`, { stdio: 'ignore' });
                this.success('–°–æ–∑–¥–∞–Ω RSA –∫–ª—é—á (—Ä–µ–∑–µ—Ä–≤–Ω—ã–π)');
                keysCreated = true;
            } catch (error) {
                this.error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å RSA –∫–ª—é—á');
            }
        } else {
            this.success('RSA –∫–ª—é—á —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
        }

        return keysCreated;
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ SSH-–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    createSSHConfig() {
        this.info('–°–æ–∑–¥–∞–Ω–∏–µ SSH-–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...');
        
        const configContent = `# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ ${this.serverIP}
Host ${this.serverIP}
    HostName ${this.serverIP}
    User ${this.sshUser}
    Port 22
    IdentityFile ${this.ed25519Key}
    IdentitiesOnly yes
    StrictHostKeyChecking yes
    UserKnownHostsFile ${this.sshDir}/known_hosts
    PreferredAuthentications publickey
    ServerAliveInterval 60
    ServerAliveCountMax 3

# –ê–ª–∏–∞—Å—ã –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
Host normaldance-server
    HostName ${this.serverIP}
    User ${this.sshUser}
    IdentityFile ${this.ed25519Key}
    IdentitiesOnly yes
    StrictHostKeyChecking yes
    UserKnownHostsFile ${this.sshDir}/known_hosts
    PreferredAuthentications publickey
    ServerAliveInterval 60
    ServerAliveCountMax 3

Host normaldance-server-rsa
    HostName ${this.serverIP}
    User ${this.sshUser}
    IdentityFile ${this.rsaKey}
    IdentitiesOnly yes
    StrictHostKeyChecking yes
    UserKnownHostsFile ${this.sshDir}/known_hosts
    PreferredAuthentications publickey
    ServerAliveInterval 60
    ServerAliveCountMax 3

# –û—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ö–æ—Å—Ç
Host normaldance-server-debug
    HostName ${this.serverIP}
    User ${this.sshUser}
    IdentityFile ${this.ed25519Key}
    IdentitiesOnly yes
    StrictHostKeyChecking yes
    UserKnownHostsFile ${this.sshDir}/known_hosts
    PreferredAuthentications publickey
    ServerAliveInterval 60
    ServerAliveCountMax 3
    LogLevel DEBUG3

# –û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
Host *
    Compression no
    ConnectTimeout 30`;

        try {
            fs.writeFileSync(this.configFile, configContent);
            fs.chmodSync(this.configFile, 0o600);
            this.success(`SSH –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞: ${this.configFile}`);
            return true;
        } catch (error) {
            this.error(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é: ${error.message}`);
            return false;
        }
    }

    // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    testConnection(identityFile = this.ed25519Key) {
        this.info(`–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å ${path.basename(identityFile)}...`);
        
        try {
            const result = execSync(`ssh -o BatchMode=yes -o ConnectTimeout=10 -i "${identityFile}" ${this.sshUser}@${this.serverIP} "echo '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ'"`, { 
                encoding: 'utf8',
                stdio: 'pipe'
            });
            
            if (result.includes('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ')) {
                this.success('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!');
                return true;
            }
        } catch (error) {
            this.debug(`–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${error.message}`);
        }
        
        return false;
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–∞ —á–µ—Ä–µ–∑ ssh-copy-id
    addKeyWithSshCopyId() {
        this.info('–ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª—é—á–∞ —á–µ—Ä–µ–∑ ssh-copy-id...');
        
        try {
            execSync(`ssh-copy-id -i "${this.ed25519Pub}" ${this.sshUser}@${this.serverIP}`, { 
                stdio: 'inherit',
                timeout: 30000
            });
            
            this.success('–ö–ª—é—á —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ ssh-copy-id');
            return true;
        } catch (error) {
            this.debug('ssh-copy-id –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã');
            return false;
        }
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª—é—á–∞
    generateManualAddInstructions() {
        this.info('–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª—é—á–∞...');
        
        if (!fs.existsSync(this.ed25519Pub)) {
            this.error('–ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return null;
        }

        const publicKey = fs.readFileSync(this.ed25519Pub, 'utf8').trim();
        
        const instructions = `
üìã –ò–ù–°–¢–†–£–ö–¶–ò–Ø –î–õ–Ø –†–£–ß–ù–û–ì–û –î–û–ë–ê–í–õ–ï–ù–ò–Ø –ö–õ–Æ–ß–ê –ù–ê –°–ï–†–í–ï–†

1. –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ö –°–ï–†–í–ï–†–£ (–µ—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø):
   ssh normaldance-server-rsa

2. –î–û–ë–ê–í–õ–ï–ù–ò–ï –ö–õ–Æ–ß–ê –ù–ê –°–ï–†–í–ï–†–ï:
   mkdir -p ~/.ssh
   chmod 700 ~/.ssh
   echo '${publicKey}' >> ~/.ssh/authorized_keys
   chmod 600 ~/.ssh/authorized_keys

3. –ü–†–û–í–ï–†–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø:
   ssh normaldance-server

–ò–õ–ò –ò–°–ü–û–õ–¨–ó–£–ô–¢–ï –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –ú–ï–¢–û–î:
ssh-copy-id -i ~/.ssh/id_ed25519.pub ${this.sshUser}@${this.serverIP}

–ü–£–ë–õ–ò–ß–ù–´–ô –ö–õ–Æ–ß –î–õ–Ø –î–û–ë–ê–í–õ–ï–ù–ò–Ø:
${publicKey}
`;

        console.log(instructions);
        return publicKey;
    }

    // –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ—à–µ–Ω–∏—è
    async solve() {
        this.log('=== –ê–í–¢–û–ú–ê–¢–ò–ó–ò–†–û–í–ê–ù–ù–û–ï –†–ï–®–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú–´ SSH ===', 'blue');
        this.log(`–°–µ—Ä–≤–µ—Ä: ${this.serverIP}`, 'blue');
        this.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${this.sshUser}`, 'blue');
        console.log('');

        // –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥–ø–æ—Å—ã–ª–æ–∫
        if (!this.checkPrerequisites()) {
            this.error('–ü—Ä–µ–¥–ø–æ—Å—ã–ª–∫–∏ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã. –ü—Ä–µ—Ä—ã–≤–∞—é –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ.');
            return false;
        }

        // –®–∞–≥ 2: –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª—é—á–µ–π
        this.createSSHKeys();

        // –®–∞–≥ 3: –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        if (!this.createSSHConfig()) {
            this.error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é');
            return false;
        }

        // –®–∞–≥ 4: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        if (this.testConnection()) {
            this.success('üéâ –ü—Ä–æ–±–ª–µ–º–∞ —Ä–µ—à–µ–Ω–∞! –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.');
            this.showUsageInstructions();
            return true;
        }

        // –®–∞–≥ 5: –ü—Ä–æ–±—É–µ–º –¥–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á —á–µ—Ä–µ–∑ ssh-copy-id
        if (this.addKeyWithSshCopyId()) {
            if (this.testConnection()) {
                this.success('üéâ –ö–ª—é—á —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω! –ü—Ä–æ–±–ª–µ–º–∞ —Ä–µ—à–µ–Ω–∞.');
                this.showUsageInstructions();
                return true;
            }
        }

        // –®–∞–≥ 6: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        const publicKey = this.generateManualAddInstructions();

        // –®–∞–≥ 7: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å RSA –∫–ª—é—á–æ–º
        this.info('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å RSA –∫–ª—é—á–æ–º...');
        if (this.testConnection(this.rsaKey)) {
            this.success('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å RSA –∫–ª—é—á–æ–º!');
            this.log('');
            this.info('–†–ï–®–ï–ù–ò–ï:');
            this.log('1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ RSA –∫–ª—é—á –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ssh normaldance-server-rsa', 'yellow');
            this.log('2. –î–æ–±–∞–≤—å—Ç–µ Ed25519 –∫–ª—é—á –≤—Ä—É—á–Ω—É—é –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤—ã—à–µ', 'yellow');
            this.log('3. –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: ssh normaldance-server', 'yellow');
            return true;
        }

        // –®–∞–≥ 8: –ò—Ç–æ–≥
        this.log('');
        this.error('–í—Å–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏');
        this.log('');
        this.info('–ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–´–ï –†–ï–®–ï–ù–ò–Ø:');
        this.log('1. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —Å–µ—Ä–≤–µ—Ä–∞', 'yellow');
        this.log('2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–∞—Ä–æ–ª—å–Ω—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é (–µ—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞)', 'yellow');
        this.log('3. –î–æ–±–∞–≤—å—Ç–µ –∫–ª—é—á —á–µ—Ä–µ–∑ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–æ–º', 'yellow');
        this.log('4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:', 'yellow');
        this.log('   - chmod 700 ~/.ssh', 'yellow');
        this.log('   - chmod 600 ~/.ssh/authorized_keys', 'yellow');
        this.log('   - chown $USER:$USER ~/.ssh -R', 'yellow');

        return false;
    }

    // –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
    showUsageInstructions() {
        this.log('');
        this.info('–ò–ù–°–¢–†–£–ö–¶–ò–ò –ü–û –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ:');
        this.log('');
        this.log('–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:', 'green');
        this.log('  ssh normaldance-server     # –û—Å–Ω–æ–≤–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ', 'cyan');
        this.log('  ssh normaldance-server-rsa # –†–µ–∑–µ—Ä–≤–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ', 'cyan');
        this.log('  ssh ${this.serverIP}         # –ü—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ', 'cyan');
        this.log('');
        this.log('–î–ª—è –æ—Ç–ª–∞–¥–∫–∏:', 'green');
        this.log('  ssh -vvv normaldance-server   # –ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥', 'cyan');
        this.log('  ssh -T normaldance-server     # –¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∫–∞', 'cyan');
        this.log('');
        this.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–π:', 'green');
        this.log('  ssh-keygen -l -f ~/.ssh/id_ed25519.pub', 'cyan');
        this.log('  ssh-keygen -l -f ~/.ssh/id_rsa.pub', 'cyan');
    }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
    const solver = new AutomatedSHHSolver();
    solver.solve().then(success => {
        process.exit(success ? 0 : 1);
    }).catch(error => {
        console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
        process.exit(1);
    });
}

module.exports = AutomatedSHHSolver;