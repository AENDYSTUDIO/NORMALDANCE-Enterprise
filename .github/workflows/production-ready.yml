name: Production Ready Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  AWS_REGION: us-east-1
  EKS_CLUSTER: normaldance-production

jobs:
  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
      
    - name: Security audit
      run: npm audit --audit-level high
      
    - name: Run security tests
      run: npm run test:security

  build-and-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
      
    - name: Run tests
      run: npm test -- --coverage
      
    - name: Build application
      run: npm run build

  deploy-production:
    if: github.ref == 'refs/heads/main'
    needs: [security-scan, build-and-test]
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Deploy infrastructure
      run: |
        aws cloudformation deploy \
          --template-file aws/cloudformation/production-stack.yml \
          --stack-name normaldance-production \
          --capabilities CAPABILITY_IAM
    
    - name: Build and push Docker image
      run: |
        docker build -t normaldance:${{ github.sha }} .
        aws ecr get-login-password | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}
        docker tag normaldance:${{ github.sha }} ${{ secrets.ECR_REGISTRY }}/normaldance:${{ github.sha }}
        docker push ${{ secrets.ECR_REGISTRY }}/normaldance:${{ github.sha }}
    
    - name: Deploy to EKS
      run: |
        aws eks update-kubeconfig --name ${{ env.EKS_CLUSTER }}
        kubectl set image deployment/normaldance-app app=${{ secrets.ECR_REGISTRY }}/normaldance:${{ github.sha }}
        kubectl rollout status deployment/normaldance-app --timeout=600s
    
    - name: Run health checks
      run: |
        sleep 30
        kubectl get pods -l app=normaldance
        node tools/cloud-automation.js health