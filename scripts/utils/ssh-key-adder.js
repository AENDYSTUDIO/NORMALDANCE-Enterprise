#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è SSH-–∫–ª—é—á–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä
 * –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è —Å–ª—É—á–∞–µ–≤, –∫–æ–≥–¥–∞ –Ω–µ—Ç –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–µ—Ä–≤–µ—Ä—É
 */

const fs = require('fs');
const path = require('path');
const { exec } = require('child_process');
const { promisify } = require('util');

const execAsync = promisify(exec);

class SSHKeyAdder {
    constructor() {
        this.serverIP = '176.108.246.49';
        this.sshUser = 'root'; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        this.keyPath = path.join(process.env.HOME || require('os').homedir(), '.ssh', 'id_ed25519.pub');
    }

    async checkPrerequisites() {
        console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥–ø–æ—Å—ã–ª–æ–∫...');
        
        if (!fs.existsSync(this.keyPath)) {
            throw new Error(`SSH –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω: ${this.keyPath}`);
        }

        const publicKey = fs.readFileSync(this.keyPath, 'utf8');
        console.log('‚úÖ SSH –∫–ª—é—á –Ω–∞–π–¥–µ–Ω:', this.keyPath);
        console.log('üìã –ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á:', publicKey.trim());
        
        return publicKey;
    }

    async generateSSHConfig() {
        console.log('üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è SSH –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...');
        
        const configContent = `# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ ${this.serverIP}
Host ${this.serverIP}
    HostName ${this.serverIP}
    User ${this.sshUser}
    Port 22
    IdentityFile ${path.join(process.env.HOME || require('os').homedir(), '.ssh', 'id_ed25519')}
    IdentitiesOnly yes
    StrictHostKeyChecking yes
    UserKnownHostsFile ~/.ssh/known_hosts
    PreferredAuthentications publickey
    ServerAliveInterval 60
    ServerAliveCountMax 3

# –ê–ª–∏–∞—Å –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
Host normaldance-server
    HostName ${this.serverIP}
    User ${this.sshUser}
    IdentityFile ${path.join(process.env.HOME || require('os').homedir(), '.ssh', 'id_ed25519')}
    IdentitiesOnly yes
    StrictHostKeyChecking yes
    UserKnownHostsFile ~/.ssh/known_hosts
    PreferredAuthentications publickey
    ServerAliveInterval 60
    ServerAliveCountMax 3`;

        const configPath = path.join(process.env.HOME || require('os').homedir(), '.ssh', 'config');
        
        // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é .ssh –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        const sshDir = path.dirname(configPath);
        if (!fs.existsSync(sshDir)) {
            fs.mkdirSync(sshDir, { mode: 0o700 });
        }

        fs.writeFileSync(configPath, configContent);
        fs.chmodSync(configPath, 0o600);
        
        console.log('‚úÖ SSH –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞:', configPath);
        return configPath;
    }

    async testConnection() {
        console.log('üîå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...');
        
        try {
            const { stdout } = await execAsync(`ssh -o BatchMode=yes -o ConnectTimeout=10 ${this.serverIP} "echo 'SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ'"`);
            console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ:', stdout.trim());
            return true;
        } catch (error) {
            console.log('‚ùå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å:', error.message);
            return false;
        }
    }

    async addKeyWithSshCopyId(publicKey) {
        console.log('üîë –ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª—é—á–∞ —á–µ—Ä–µ–∑ ssh-copy-id...');
        
        try {
            await execAsync(`echo "${publicKey}" | ssh-copy-id -i "${this.keyPath}" ${this.sshUser}@${this.serverIP}`);
            console.log('‚úÖ –ö–ª—é—á —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ ssh-copy-id');
            return true;
        } catch (error) {
            console.log('‚ùå ssh-copy_id –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª:', error.message);
            return false;
        }
    }

    async addKeyManual(publicKey) {
        console.log('üîß –†—É—á–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–∞...');
        
        const tempScript = `#!/bin/bash
mkdir -p ~/.ssh
echo '${publicKey}' >> ~/.ssh/authorized_keys
chmod 600 ~/.ssh/authorized_keys
echo '–ö–ª—é—á —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω'
echo '–¢–µ–∫—É—â–µ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ authorized_keys:'
cat ~/.ssh/authorized_keys`;

        try {
            // –î–ª—è Windows –∏—Å–ø–æ–ª—å–∑—É–µ–º sshpass, –¥–ª—è Linux –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å expect
            if (process.platform === 'win32') {
                console.log('ü™ü Windows –æ–±–Ω–∞—Ä—É–∂–µ–Ω, —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–∞');
                console.log('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —ç—Ç–∏ –∫–æ–º–∞–Ω–¥—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:');
                console.log('1. ssh root@176.108.246.49');
                console.log('2. mkdir -p ~/.ssh');
                console.log('3. echo "' + publicKey.trim() + '" >> ~/.ssh/authorized_keys');
                console.log('4. chmod 600 ~/.ssh/authorized_keys');
                console.log('5. exit');
                return false;
            } else {
                // –î–ª—è Linux/Mac –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å expect –∏–ª–∏ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –ø–∞—Ä–æ–ª—å
                console.log('üêß Linux/Mac –æ–±–Ω–∞—Ä—É–∂–µ–Ω');
                console.log('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:');
                console.log(`ssh ${this.sshUser}@${this.serverIP} "${tempScript}"`);
                return false;
            }
        } catch (error) {
            console.log('‚ùå –†—É—á–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å:', error.message);
            return false;
        }
    }

    async generateBackupKey() {
        console.log('üîÑ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ RSA –∫–ª—é—á–∞...');
        
        const rsaKeyPath = path.join(process.env.HOME || require('os').homedir(), '.ssh', 'id_rsa');
        
        try {
            await execAsync(`ssh-keygen -t rsa -b 4096 -f "${rsaKeyPath}" -N ""`);
            console.log('‚úÖ –†–µ–∑–µ—Ä–≤–Ω—ã–π RSA –∫–ª—é—á —Å–æ–∑–¥–∞–Ω:', rsaKeyPath);
            return rsaKeyPath;
        } catch (error) {
            console.log('‚ùå –°–æ–∑–¥–∞–Ω–∏–µ RSA –∫–ª—é—á–∞ –Ω–µ —É–¥–∞–ª–æ—Å—å:', error.message);
            return null;
        }
    }

    async run() {
        console.log('üöÄ –ó–∞–ø—É—Å–∫ SSH Key Adder...');
        console.log('=====================================');
        
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥–ø–æ—Å—ã–ª–∫–∏
            const publicKey = await this.checkPrerequisites();
            
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            await this.generateSSHConfig();
            
            // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            if (await this.testConnection()) {
                console.log('üéâ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!');
                return true;
            }
            
            console.log('‚ö†Ô∏è –û—Å–Ω–æ–≤–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã...');
            
            // –ü—Ä–æ–±—É–µ–º –¥–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á —á–µ—Ä–µ–∑ ssh-copy-id
            if (await this.addKeyWithSshCopyId(publicKey)) {
                if (await this.testConnection()) {
                    console.log('üéâ –ö–ª—é—á —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!');
                    return true;
                }
            }
            
            // –†—É—á–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ
            await this.addKeyManual(publicKey);
            
            // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –∫–ª—é—á
            await this.generateBackupKey();
            
            console.log('=====================================');
            console.log('üìã –ò—Ç–æ–≥:');
            console.log('1. SSH –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞');
            console.log('2. –ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –≥–æ—Ç–æ–≤ –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é');
            console.log('3. –†–µ–∑–µ—Ä–≤–Ω—ã–π RSA –∫–ª—é—á —Å–æ–∑–¥–∞–Ω');
            console.log('');
            console.log('üîß –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
            console.log('1. –î–æ–±–∞–≤—å—Ç–µ –≤–∞—à Ed25519 –∫–ª—é—á –≤ ~/.ssh/authorized_keys –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ');
            console.log('2. –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ RSA –∫–ª—é—á: ssh -i ~/.ssh/id_rsa root@176.108.246.49');
            console.log('3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞: chmod 700 ~/.ssh && chmod 600 ~/.ssh/authorized_keys');
            
            return false;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
            return false;
        }
    }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
    const adder = new SSHKeyAdder();
    adder.run().then(success => {
        process.exit(success ? 0 : 1);
    }).catch(error => {
        console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
        process.exit(1);
    });
}

module.exports = SSHKeyAdder;