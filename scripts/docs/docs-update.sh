#!/bin/bash# NormalDance Documentation Update Script# This script automatically updates documentation for NormalDanceset -e# ConfigurationREPO_URL="https://github.com/normaldance/normaldance.git"DOCS_DIR="docs"API_DOCS_DIR="docs/api"USER_GUIDE_DIR="docs/user-guide"FAQ_DIR="docs/faq"TUTORIALS_DIR="docs/tutorials"BRANCH="main"GITHUB_TOKEN="${GITHUB_TOKEN:-}"COMMIT_AUTHOR="NormalDance Bot <bot@normaldance.app>"COMMIT_MESSAGE="Update documentation - $(date '+%Y-%m-%d %H:%M:%S')"# Colors for outputRED='\033[0;31m'GREEN='\033[0;32m'YELLOW='\033[1;33m'NC='\033[0m' # No Color# Logging functionlog() {    echo -e "${GREEN}[INFO]${NC} $1"}warn() {    echo -e "${YELLOW}[WARN]${NC} $1"}error() {    echo -e "${RED}[ERROR]${NC} $1"    exit 1}# Check prerequisitescheck_prerequisites() {    log "Checking prerequisites..."        # Check if git is installed    if ! command -v git &> /dev/null; then        error "git is not installed"    fi        # Check if node is installed    if ! command -v node &> /dev/null; then        error "node is not installed"    fi        # Check if npm is installed    if ! command -v npm &> /dev/null; then        error "npm is not installed"    fi        # Check if GitHub token is set    if [ -z "$GITHUB_TOKEN" ]; then        error "GitHub token not set. Please set GITHUB_TOKEN environment variable"    fi        log "All prerequisites are installed"}# Clone repositoryclone_repository() {    log "Cloning repository..."        # Create temporary directory    TEMP_DIR=$(mktemp -d)        # Clone repository    git clone "$REPO_URL" "$TEMP_DIR"        # Navigate to repository    cd "$TEMP_DIR"        log "Repository cloned"}# Generate API documentationgenerate_api_docs() {    log "Generating API documentation..."        # Install dependencies    npm ci        # Generate OpenAPI documentation    npm run docs:generate        # Check if API docs were generated    if [ ! -d "$API_DOCS_DIR" ]; then        error "API documentation not generated"    fi        log "API documentation generated"}# Generate user guidegenerate_user_guide() {    log "Generating user guide..."        # Generate user guide    npm run docs:user-guide        # Check if user guide was generated    if [ ! -d "$USER_GUIDE_DIR" ]; then        error "User guide not generated"    fi        log "User guide generated"}# Generate FAQgenerate_faq() {    log "Generating FAQ..."        # Generate FAQ    npm run docs:faq        # Check if FAQ was generated    if [ ! -d "$FAQ_DIR" ]; then        error "FAQ not generated"    fi        log "FAQ generated"}# Generate tutorialsgenerate_tutorials() {    log "Generating tutorials..."        # Generate tutorials    npm run docs:tutorials        # Check if tutorials were generated    if [ ! -d "$TUTORIALS_DIR" ]; then        error "Tutorials not generated"    fi        log "Tutorials generated"}# Update documentation indexupdate_docs_index() {    log "Updating documentation index..."        # Create or update documentation index    cat > "$DOCS_DIR/README.md" << EOF# NormalDance DocumentationWelcome to the NormalDance documentation. This repository contains comprehensive documentation for the NormalDance platform.## Documentation Structure- [API Documentation]($API_DOCS_DIR/README.md) - REST API documentation- [User Guide]($USER_GUIDE_DIR/README.md) - User guide and tutorials- [FAQ]($FAQ_DIR/README.md) - Frequently asked questions- [Tutorials]($TUTORIALS_DIR/README.md) - Step-by-step tutorials## Quick Links- [Getting Started](user-guide/getting-started.md)- [API Reference](api/README.md)- [Developer Guide](developer-guide.md)- [Deployment Guide](deployment-guide.md)## ContributingWe welcome contributions to our documentation. Please see our [contribution guidelines](CONTRIBUTING.md) for more information.## SupportIf you need help, please check our [FAQ](faq/README.md) or contact our support team.---*This documentation is automatically generated and updated.*EOF    log "Documentation index updated"}# Commit and push changescommit_and_push() {    log "Committing and pushing changes..."        # Configure git    git config user.name "$COMMIT_AUTHOR"    git config user.email "$COMMIT_AUTHOR"        # Add changes    git add .        # Check if there are changes to commit    if ! git diff --cached --quiet; then        # Commit changes        git commit -m "$COMMIT_MESSAGE"                # Push changes        git push origin "$BRANCH"                log "Changes committed and pushed"    else        log "No changes to commit"    fi}# Create pull request (optional)create_pull_request() {    log "Creating pull request..."        # Get current branch    CURRENT_BRANCH=$(git branch --show-current)        # Create pull request    curl -X POST \        -H "Authorization: token $GITHUB_TOKEN" \        -H "Accept: application/vnd.github.v3+json" \        https://api.github.com/repos/normaldance/normaldance/pulls \        -d '{            "title": "Update documentation",            "body": "This pull request contains automatic documentation updates.",            "head": "'$CURRENT_BRANCH'",            "base": "main"        }'        log "Pull request created"}# Deploy documentation to GitHub Pagesdeploy_docs() {    log "Deploying documentation to GitHub Pages..."        # Install gh-pages    npm install -g gh-pages        # Deploy documentation    gh-pages -d "$DOCS_DIR" -m "Deploy documentation - $(date '+%Y-%m-%d %H:%M:%S')"        log "Documentation deployed to GitHub Pages"}# Send notificationsend_notification() {    log "Sending notification..."        # Send Slack notification    if [ -n "$SLACK_WEBHOOK" ]; then        curl -X POST -H 'Content-type: application/json' \            --data "{\"text\":\"ðŸ“š NormalDance documentation updated successfully!\n\nRepository: $REPO_URL\nBranch: $BRANCH\nCommit: $(git rev-parse HEAD)\nTimestamp: $(date '+%Y-%m-%d %H:%M:%S')\"}" \            $SLACK_WEBHOOK    fi        log "Notification sent"}# Main functionmain() {    log "Starting NormalDance documentation update..."        # Check prerequisites    check_prerequisites        # Clone repository    clone_repository        # Generate API documentation    generate_api_docs        # Generate user guide    generate_user_guide        # Generate FAQ    generate_faq        # Generate tutorials    generate_tutorials        # Update documentation index    update_docs_index        # Commit and push changes    commit_and_push        # Create pull request (optional)    if [ "$CREATE_PR" = "true" ]; then        create_pull_request    fi        # Deploy documentation to GitHub Pages    if [ "$DEPLOY_DOCS" = "true" ]; then        deploy_docs    fi        # Send notification    send_notification        # Clean up    cd ..    rm -rf "$TEMP_DIR"        log "Documentation update completed successfully!"}# Parse command line argumentswhile [[ $# -gt 0 ]]; do    case $1 in        --repo-url)            REPO_URL="$2"            shift 2            ;;        --docs-dir)            DOCS_DIR="$2"            shift 2            ;;        --api-docs-dir)            API_DOCS_DIR="$2"            shift 2            ;;        --user-guide-dir)            USER_GUIDE_DIR="$2"            shift 2            ;;        --faq-dir)            FAQ_DIR="$2"            shift 2            ;;        --tutorials-dir)            TUTORIALS_DIR="$2"            shift 2            ;;        --branch)            BRANCH="$2"            shift 2            ;;        --github-token)            GITHUB_TOKEN="$2"            shift 2            ;;        --commit-author)            COMMIT_AUTHOR="$2"            shift 2            ;;        --commit-message)            COMMIT_MESSAGE="$2"            shift 2            ;;        --create-pr)            CREATE_PR="true"            shift            ;;        --deploy-docs)            DEPLOY_DOCS="true"            shift            ;;        --help)            echo "Usage: $0 [OPTIONS]"            echo "Options:"            echo "  --repo-url URL               Repository URL (default: https://github.com/normaldance/normaldance.git)"            echo "  --docs-dir DIR               Documentation directory (default: docs)"            echo "  --api-docs-dir DIR           API documentation directory (default: docs/api)"            echo "  --user-guide-dir DIR         User guide directory (default: docs/user-guide)"            echo "  --faq-dir DIR                FAQ directory (default: docs/faq)"            echo "  --tutorials-dir DIR          Tutorials directory (default: docs/tutorials)"            echo "  --branch BRANCH              Git branch (default: main)"            echo "  --github-token TOKEN         GitHub token (default: from GITHUB_TOKEN env var)"            echo "  --commit-author AUTHOR       Commit author (default: NormalDance Bot <bot@normaldance.app>)"            echo "  --commit-message MESSAGE     Commit message (default: Update documentation - timestamp)"            echo "  --create-pr                  Create pull request (default: false)"            echo "  --deploy-docs                Deploy to GitHub Pages (default: false)"            echo "  --help                       Show this help message"            exit 0            ;;        *)            error "Unknown option: $1"            ;;    esacdone# Run main functionmain "$@"