#!/bin/bash# Скрипт для автоматического развертывания инфраструктуры на Cloud.ruset -e# Цвета для выводаRED='\033[0;31m'GREEN='\033[0;32m'YELLOW='\033[1;33m'NC='\033[0m' # No Color# Проверка наличия Terraformif ! command -v terraform &> /dev/null; then    echo -e "${RED}Ошибка: Terraform не установлен${NC}"    exit 1fi# Функция для вывода сообщенийlog_info() {    echo -e "${GREEN}[INFO]${NC} $1"}log_warn() {    echo -e "${YELLOW}[WARN]${NC} $1"}log_error() {    echo -e "${RED}[ERROR]${NC} $1"}# Основная функция развертыванияdeploy_infrastructure() {    log_info "Начало развертывания инфраструктуры"        # Переходим в директорию с Terraform    cd terraform        # Инициализация Terraform    log_info "Инициализация Terraform"    terraform init        # Проверка конфигурации    log_info "Проверка конфигурации"    terraform validate        # Просмотр плана    log_info "Просмотр плана развертывания"    terraform plan -var-file=terraform.tfvars -out=tfplan        # Запрос подтверждения    echo -e "${YELLOW}Будет развернута инфраструктура. Продолжить? (y/n)${NC}"    read -r response    if [[ "$response" =~ ^([yY][eE][sS]|[yY])$ ]]; then        # Применение конфигурации        log_info "Применение конфигурации"        terraform apply -auto-approve -var-file=terraform.tfvars                # Сохранение выходных данных        log_info "Сохранение выходных данных"        terraform output -json > ../infrastructure.json                # Создание бэкапа конфигурации        log_info "Создание бэкапа конфигурации"        mkdir -p ../backups        cp *.tf ../backups/        cp *.tfvars ../backups/        tar -czf ../backups/infrastructure-backup-$(date +%Y%m%d-%H%M%S).tar.gz ../backups/                log_info "Инфраструктура успешно развернута!"        log_info "Файл с выходными данными: infrastructure.json"    else        log_info "Развертывание отменено"    fi}# Функция для удаления инфраструктурыdestroy_infrastructure() {    log_info "Начало удаления инфраструктуры"        cd terraform        # Запрос подтверждения    echo -e "${RED}Будет удалена вся инфраструктура. Продолжить? (y/n)${NC}"    read -r response    if [[ "$response" =~ ^([yY][eE][sS]|[yY])$ ]]; then        # Удаление инфраструктуры        log_info "Удаление инфраструктуры"        terraform destroy -auto-approve -var-file=terraform.tfvars                # Очистка        log_info "Очистка временных файлов"        rm -f tfplan        rm -f .terraform.lock.hcl        rm -rf .terraform                log_info "Инфраструктура успешно удалена!"    else        log_info "Удаление отменено"    fi}# Функция для просмотра состоянияshow_status() {    log_info "Просмотр состояния инфраструктуры"        cd terraform        if [ -f "terraform.tfstate" ]; then        echo -e "${GREEN}Текущее состояние инфраструктуры:${NC}"        terraform state list        echo ""        echo -e "${GREEN}Выходные данные:${NC}"        terraform output    else        log_warn "Файл состояния не найден. Инфраструктура не развернута."    fi}# Функция для создания бэкапаcreate_backup() {    log_info "Создание бэкапа"        # Создание бэкапа конфигурации    mkdir -p backups    cp terraform/*.tf backups/    cp terraform/*.tfvars backups/        # Создание бэкапа базы данных    if [ -f "infrastructure.json" ]; then        db_endpoint=$(jq -r '.db_endpoint.value' infrastructure.json)        db_password=$(jq -r '.db_password.value' infrastructure.json)                if [ ! -z "$db_endpoint" ] && [ ! -z "$db_password" ]; then            log_info "Создание бэкапа базы данных"            mysqldump -h "$db_endpoint" -u admin -p"$db_password" budget_db > backups/database-backup-$(date +%Y%m%d-%H%M%S).sql        fi    fi        # Архивация    tar -czf backups/backup-$(date +%Y%m%d-%H%M%S).tar.gz backups/        log_info "Бэкап создан: backups/backup-$(date +%Y%m%d-%H%M%S).tar.gz"}# Функция для восстановления из бэкапаrestore_backup() {    log_info "Восстановление из бэкапа"        # Поиск последнего бэкапа    latest_backup=$(ls -t backups/*.tar.gz | head -1)        if [ -z "$latest_backup" ]; then        log_error "Бэкапы не найдены"        exit 1    fi        log_info "Восстановление из бэкапа: $latest_backup"        # Распаковка бэкапа    tar -xzf "$latest_backup"        # Восстановление конфигурации    cp backups/*.tf terraform/    cp backups/*.tfvars terraform/        log_info "Бэкап восстановлен"}# Основная логика скриптаcase "${1:-}" in    "deploy")        deploy_infrastructure        ;;    "destroy")        destroy_infrastructure        ;;    "status")        show_status        ;;    "backup")        create_backup        ;;    "restore")        restore_backup        ;;    *)        echo "Использование: $0 {deploy|destroy|status|backup|restore}"        echo ""        echo "  deploy    - Развернуть инфраструктуру"        echo "  destroy   - Удалить инфраструктуру"        echo "  status    - Показать состояние инфраструктуры"        echo "  backup    - Создать бэкап"        echo "  restore   - Восстановить из бэкапа"        exit 1        ;;esac